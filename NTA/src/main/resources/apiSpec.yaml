openapi: 3.1.0
info:
  title: NTA Travel & Booking API
  version: 1.0.0
  description: 'API for managing Patients, Bookings, Support Persons, Service Providers, and Accommodations.'
  contact:
    name: Hamish Phillips
    email: hamish@phillipsmusictech.co.nz
servers:
  - url: 'http://localhost:8080/api'
paths:
  /patients:
    get:
      summary: List all patients
      responses:
        '200':
          description: A list of patients
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Patient'
        '404':
          description: Patients Not Found
      operationId: getPatients
      description: Retrieve all Patients
      tags:
        - patients
    post:
      summary: Create a new patient
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Patient'
      responses:
        '201':
          description: Patient created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Patient'
        '409':
          description: Patient already exists
      tags:
        - patients
      operationId: addPatient
      description: Add a Patient
  '/patients/{nhi}':
    get:
      summary: Get a patient by NHI
      parameters:
        - name: nhi
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Patient details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Patient'
      operationId: getPatientById
      tags:
        - patients
      description: get Patient by Id
    put:
      summary: Update a patient
      parameters:
        - name: nhi
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Patient'
      responses:
        '200':
          description: Updated patient
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Patient'
        '404':
          description: Patient Not Found
      operationId: updatePatientById
      description: Update a Patient by Id.
      tags:
        - patients
    delete:
      summary: Delete a patient
      parameters:
        - name: nhi
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Patient deleted
        '404':
          description: Patient Not Found
      operationId: deletePatientById
      description: Delete a patient by Id
      tags:
        - patients
  '/bookings/{nhi}':
    get:
      summary: List bookings for a patient
      parameters:
        - name: nhi
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Bookings for patient
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Booking'
        '404':
          description: Patient Not Found
      operationId: getPatientBookings
      description: Retrieve Patients Bookings.
      tags:
        - patients
        - bookings
    post:
      summary: ''
      operationId: addPatientBooking
      responses:
        '201':
          description: Created New Booking
        '409':
          description: Booking already exists
      description: Add a New Booking for a Patient
      tags:
        - patients
        - bookings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Booking'
        description: ''
      parameters: []
    parameters:
      - schema:
          type: string
        name: nhi
        in: path
        required: true
  '/patients/{nhi}/notes':
    parameters:
      - schema:
          type: string
        name: nhi
        in: path
        required: true
    get:
      summary: Get Patient Notes
      tags:
        - patients
        - notes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Note'
                  x-stoplight:
                    id: 2a85g235hqwzg
        '404':
          description: Patient Not Found
      operationId: getPatientNotes
      description: Retrieve Patient Notes
    post:
      summary: Add a Patient Note
      operationId: addPatientNote
      responses:
        '200':
          description: OK
        '404':
          description: Patient Not Found
      description: Add a Patient Note
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Note'
        description: ''
      tags:
        - patients
        - notes
  '/patients/{nhi}/patient-service-providers':
    parameters:
      - schema:
          type: string
        name: nhi
        in: path
        required: true
    get:
      summary: GET a Patient's Service Providers
      tags:
        - patients
        - service-providers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PatientServiceProvider'
                  x-stoplight:
                    id: 6ysw2piuel2ds
        '404':
          description: Patient Not Found
      operationId: getPatientServiceProviders
      description: Retrieve Patient Support providers
    post:
      summary: POST a Patient Service Providers
      operationId: addPatientServiceProvider
      responses:
        '200':
          description: OK
        '404':
          description: Patient Not Found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatientServiceProvider'
      description: Add a Patient Support Provider
      tags:
        - service-providers
        - patients
  '/patients/{nhi}/patient-service-providers/{id}':
    parameters:
      - schema:
          type: string
        name: nhi
        in: path
        required: true
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: GET Patient Service Provider
      tags:
        - patients
        - service-providers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatientServiceProvider'
        '404':
          description: Patient Not Found
      operationId: getPatientServiceProvider
      description: Retrieve a Patient Service Provider
    put:
      summary: Update Patient Service Provider
      operationId: updatePatientServiceProvider
      responses:
        '200':
          description: OK
        '404':
          description: Service Provider or Patient Not Found
      description: Update Patient Service Provider
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatientServiceProvider'
      tags:
        - patients
        - service-providers
  /support-persons:
    get:
      summary: List all support persons
      responses:
        '200':
          description: A list of support persons
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SupportPerson'
        '404':
          description: Supporters Not Found
      operationId: getSupporters
      description: Retrieves all Patient Supporters
      tags:
        - support-persons
    post:
      summary: Create a new support person
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SupportPerson'
      responses:
        '201':
          description: Support person created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupportPerson'
        '409':
          description: Supporter Already Exists
      operationId: addSupportPerson
      description: Add a Support Person
      tags:
        - support-persons
  '/support-persons/{id}':
    get:
      summary: Get a support person by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Support person details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupportPerson'
        '404':
          description: Supporter Not Found
      operationId: getSupporterById
      description: Retrieve a Support by thier ID.
      tags:
        - support-persons
    put:
      summary: Update a support person
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SupportPerson'
      responses:
        '200':
          description: Updated support person
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupportPerson'
        '404':
          description: Supporter Not Found
      operationId: updateSupporterById
      description: Updates a Supporter By thier ID.
      tags:
        - support-persons
    delete:
      summary: Delete a support person
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Support person deleted
        '404':
          description: Supporter Not Found
      operationId: deleteSupporterById
      description: Deletes a supporter by their ID.
      tags:
        - support-persons
  '/bookings/{nhi}/{id}':
    get:
      summary: Get booking details
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Booking details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        '404':
          description: Booking Not Found
      operationId: getBookingById
      description: Retrieve booking by ID.
      tags:
        - bookings
    put:
      summary: Update a booking
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Booking'
      responses:
        '200':
          description: Updated booking
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        '404':
          description: Booking Not Found
      operationId: updateBookingById
      description: Update Booking by Id
      tags:
        - bookings
    delete:
      summary: Cancel a booking
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Booking cancelled
        '404':
          description: Booking Not Found
      operationId: deleteBookingById
      description: Delete Booking by Id
      tags:
        - bookings
    parameters:
      - schema:
          type: string
        name: nhi
        in: path
        required: true
      - schema:
          type: string
        name: id
        in: path
        required: true
  '/bookings/{id}/notes':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Get Booking Notes
      tags:
        - bookings
        - notes
      responses:
        '204':
          description: No Content
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Note'
                  x-stoplight:
                    id: ke80m2f0zdq17
        '404':
          description: Booking Not Found
      operationId: getBookingNotes
      description: Retrieve the Booking Notes for a booking
    post:
      summary: Add Booking Note
      operationId: addBookingNote
      responses:
        '200':
          description: OK
          content: {}
        '404':
          description: Booking Not Found
      description: Add a Note to Booking
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Note'
      tags:
        - bookings
        - notes
  /service-providers:
    get:
      summary: List all service providers
      responses:
        '200':
          description: List of providers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServiceProvider'
        '404':
          description: Service Providers Not Found
      operationId: getServiceProviders
      description: Retrieve all Service Providers
      tags:
        - service-providers
    post:
      summary: Create a new service provider
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceProvider'
      responses:
        '201':
          description: Service provider created
        '409':
          description: Service Provider Already Exists
      operationId: addServiceProvider
      description: Add a Service Provider
      tags:
        - service-providers
  '/service-providers/{id}':
    get:
      summary: Get service provider by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Service provider details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceProvider'
        '404':
          description: Service Provider Not Found
      operationId: getServiceProviderById
      description: Retrieve a Service Provider by ID
      tags:
        - service-providers
    put:
      summary: Update service provider
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceProvider'
      responses:
        '200':
          description: Updated service provider
        '404':
          description: Service Provider Not Found
      operationId: updateServiceProviderById
      description: Update a Service Provider by ID.
      tags:
        - service-providers
    delete:
      summary: Delete service provider
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Deleted service provider
        '404':
          description: Service Provider Not Found
      operationId: deleteServiceProviderById
      description: Delete a Service Provider by Id
      tags:
        - service-providers
  /accommodations:
    get:
      summary: List all accommodations
      responses:
        '200':
          description: List of accommodations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Accommodation'
        '404':
          description: Accommodation Not Found
      operationId: getAccommodation
      description: Retrieve All Accommodations
      tags:
        - accommodations
    post:
      summary: Create a new accommodation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Accommodation'
      responses:
        '201':
          description: Accommodation created
        '409':
          description: Accommodation Already Exists
      operationId: addAccommodation
      description: Add a new Accommodation
      tags:
        - accommodations
  '/accommodations/{address}':
    get:
      summary: Get accommodation by address
      parameters:
        - name: address
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Accommodation details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Accommodation'
        '404':
          description: Accommodation Not Found
      operationId: getAccommodationByAddress
      description: Retrieve accommodation via Address
      tags:
        - accommodations
    put:
      summary: Update accommodation
      parameters:
        - name: address
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Accommodation'
      responses:
        '200':
          description: Updated accommodation
        '404':
          description: Accommodation Not Found
      operationId: updateAccommodationByAddress
      description: Update Accommodation via Address
      tags:
        - accommodations
    delete:
      summary: Delete accommodation
      parameters:
        - name: address
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Deleted accommodation
        '404':
          description: Accommodation not Found
      operationId: deleteAccommodationByAddress
      description: Delete an accommodation by Address
      tags:
        - accommodations
components:
  schemas:
    Patient:
      type: object
      properties:
        nhi:
          type: string
          maxLength: 7
        ntaNumber:
          type: string
          maxLength: 7
        firstName:
          type: string
          maxLength: 30
        surname:
          type: string
          maxLength: 30
        notes:
          type: array
          x-stoplight:
            id: a5b9uo2h5tn2b
          items:
            $ref: '#/components/schemas/Note'
            x-stoplight:
              id: 7118i73waf800
        supportProviders:
          x-stoplight:
            id: tu0kke7d8sy77
          type: array
          items:
            $ref: '#/components/schemas/PatientServiceProvider'
            x-stoplight:
              id: 0i20xl1qen82s
      required:
        - nhi
        - firstName
        - surname
    SupportPerson:
      type: object
      properties:
        id:
          type: integer
        firstName:
          type: string
          maxLength: 30
        surname:
          type: string
          maxLength: 30
        coveredByNta:
          type: boolean
        patient:
          $ref: '#/components/schemas/Patient'
          x-stoplight:
            id: sv805lhoqkij2
      required:
        - id
        - firstName
        - surname
        - coveredByNta
    Booking:
      type: object
      properties:
        id:
          type: integer
        dateOfDeparture:
          type: string
          format: date
        dateOfReturn:
          type: string
          format: date
          nullable: true
        destination:
          type: string
          x-stoplight:
            id: 9ralr1tinlcdr
        bookingStatus:
          type: string
          maxLength: 15
        estimatedCost:
          type: number
          format: float
        estimatedCostForPatient:
          type: number
          x-stoplight:
            id: eu7asntsiivnn
          format: float
        bookingCreatedAt:
          type: string
          format: date-time
        serviceProvider:
          $ref: '#/components/schemas/ServiceProvider'
          x-stoplight:
            id: zwt73mcuom7en
        accommodation:
          $ref: '#/components/schemas/Accommodation'
          x-stoplight:
            id: omsd7xtb6by5i
        supportPersons:
          type: array
          items:
            $ref: '#/components/schemas/BookedSupportPerson'
        notes:
          x-stoplight:
            id: q1n5a1szwt3d5
          type: array
          items:
            $ref: '#/components/schemas/Note'
            x-stoplight:
              id: 0wfqry889bsg8
        patientNhi:
          $ref: '#/components/schemas/Patient'
          x-stoplight:
            id: cf6695mumxqcj
      required:
        - dateOfDeparture
        - bookingStatus
        - estimatedCost
        - bookingCreatedAt
        - serviceProvider
        - patientNhi
    ServiceProvider:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          maxLength: 50
        address:
          type: string
          maxLength: 100
      required:
        - name
        - address
    Accommodation:
      type: object
      properties:
        address:
          type: string
          maxLength: 100
        name:
          type: string
          maxLength: 50
      required:
        - address
        - name
    BookedSupportPerson:
      title: BookedSupportPerson
      x-stoplight:
        id: wjwp2ksall9pj
      type: object
      properties:
        supportPerson:
          $ref: '#/components/schemas/SupportPerson'
          x-stoplight:
            id: w5a3zm38w0tjk
    Note:
      title: Note
      x-stoplight:
        id: t1hhkqpm11vef
      type: object
      description: Notes Model
      properties:
        id:
          type: string
        message:
          type: string
          x-stoplight:
            id: bm45upjpx1c6g
        booking:
          $ref: '#/components/schemas/Booking'
          x-stoplight:
            id: k5x237crt9duh
        patient:
          $ref: '#/components/schemas/Patient'
          x-stoplight:
            id: 3qjg5h0ofe2ju
      required:
        - message
    PatientServiceProvider:
      title: PatientServiceProvider
      x-stoplight:
        id: ya45sz5s3ky2n
      type: object
      properties:
        id:
          type: string
          x-stoplight:
            id: 8tjjqoynmkgdq
        serviceProvider:
          $ref: '#/components/schemas/ServiceProvider'
          x-stoplight:
            id: gaxqo9yozbgo0
        frequency:
          type: string
          x-stoplight:
            id: pqjt85fm823dg
      required:
        - serviceProvider
        - frequency
tags:
  - name: accommodations
  - name: bookings
  - name: notes
  - name: patients
  - name: service-providers
  - name: support-persons
